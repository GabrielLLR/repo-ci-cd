name: Jira Task Creation

on:
  workflow_call:
    secrets:
      JIRA_URL:
        required: true
      JIRA_USER:
        required: true
      JIRA_API_TOKEN:
        required: true
      JIRA_PROJECT:
        required: true
    inputs:
      PR_TITLE:
        required: true
        type: string
      PR_URL:
        required: true
        type: string
      PR_AUTHOR:
        required: true
        type: string

jobs:
  jira:
    runs-on: ubuntu-latest
    steps:
      - name: Validar Secrets Necess√°rias
        run: |
          if [[ -z "${{ secrets.JIRA_URL }}" || -z "${{ secrets.JIRA_USER }}" || -z "${{ secrets.JIRA_API_TOKEN }}" || -z "${{ secrets.JIRA_PROJECT }}" ]]; then
            echo "‚ùå Uma ou mais secrets obrigat√≥rias n√£o est√£o definidas."
            exit 1
          fi
          echo "‚úÖ Todas as secrets obrigat√≥rias est√£o definidas."

      - name: Baixar relat√≥rios
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Verificar se a Task j√° existe
        id: check-jira-task
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
        run: |
          EXISTING_ISSUE=$(curl -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -X GET "$JIRA_URL/rest/api/2/search?jql=project=$JIRA_PROJECT+AND+summary~\"Revis√£o do PR: ${{ inputs.PR_TITLE }}\"&maxResults=1")
          
          ISSUE_ID=$(echo "$EXISTING_ISSUE" | jq -r '.issues[0].id')
          
          if [[ "$ISSUE_ID" != "null" && -n "$ISSUE_ID" ]]; then
            echo "JIRA_ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
            echo "‚úÖ Task existente encontrada: $ISSUE_ID"
          else
            echo "JIRA_ISSUE_ID=" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Nenhuma Task existente encontrada, ser√° criada uma nova."
          fi

      - name: Criar ou Atualizar Task no Jira
        id: jira-task
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
          JIRA_ISSUE_TYPE: "Task"
        run: |
          if [[ -n "$JIRA_ISSUE_ID" ]]; then
            echo "üîÑ Atualizando Task existente: $JIRA_ISSUE_ID"
          else
            ISSUE_PAYLOAD=$(jq -n \
              --arg project "$JIRA_PROJECT" \
              --arg summary "Revis√£o do PR: ${{ inputs.PR_TITLE }}" \
              --arg description "Revis√£o do PR: ${{ inputs.PR_TITLE }}. Link: ${{ inputs.PR_URL }} Criado por: ${{ inputs.PR_AUTHOR }}" \
              --arg issuetype "$JIRA_ISSUE_TYPE" \
              '{ fields: { project: { key: $project }, summary: $summary, description: $description, issuetype: { name: $issuetype } } }')

            RESPONSE=$(curl -X POST -H "Content-Type: application/json" \
              -u "$JIRA_USER:$JIRA_API_TOKEN" \
              --data "$ISSUE_PAYLOAD" "$JIRA_URL/rest/api/2/issue/")

            ISSUE_ID=$(echo "$RESPONSE" | jq -r '.id')
            echo "JIRA_ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
            echo "‚úÖ Nova Task criada: $ISSUE_ID"
          fi

      - name: Anexar Relat√≥rios √† Task
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          for FILE in reports/*; do
            if [[ -f "$FILE" ]]; then
              echo "üìé Anexando $FILE √† Task $JIRA_ISSUE_ID"
              curl -X POST -H "X-Atlassian-Token: no-check" \
                -H "Authorization: Basic $(echo -n "$JIRA_USER:$JIRA_API_TOKEN" | base64)" \
                -F "file=@$FILE" "$JIRA_URL/rest/api/2/issue/$JIRA_ISSUE_ID/attachments"
            fi
          done
          echo "‚úÖ Todos os anexos foram adicionados √† Task."

      - name: Mudar status da Task para "Em Andamento"
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          echo "üîÑ Alterando status da Task $JIRA_ISSUE_ID para 'Em Andamento' (ID 31)..."

          TRANSITION_PAYLOAD='{"transition": {"id": "31"}}'

          TRANSITION_RESPONSE=$(curl -X POST -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "$TRANSITION_PAYLOAD" "$JIRA_URL/rest/api/2/issue/$JIRA_ISSUE_ID/transitions")

          echo "Resposta da API (Transi√ß√£o): $TRANSITION_RESPONSE"

          if [[ "$TRANSITION_RESPONSE" == *"errorMessages"* ]]; then
            echo "‚ùå Erro ao atualizar status da Task!"
            exit 1
          fi

          echo "‚úÖ Status da Task atualizado para 'Em Andamento'."
